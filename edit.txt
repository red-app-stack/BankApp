
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:firebase_database/firebase_database.dart';
import '../../utils/resizable_container.dart';
import '../../utils/shared_prefs.dart';
import '../dialogs/grade_edit_dialog.dart';

class HomeScreenState extends State<HomeScreen> {
  final List<String> students = [];
  final List<String> dates = [];
  final Map<String, Map<String, Map<String, String>>> scores = {};
  final ScrollController _verticalController = ScrollController();
  final ScrollController _horizontalController = ScrollController();
  late String groupId;
  late String subjectId;

  @override
  void initState() {
    super.initState();
    _loadInitialData();
  }

  Future<void> _loadInitialData() async {
    await _loadGroupAndSubjectIds();
    await _loadStudentsAndDates();
    await synchronize();
  }

  Future<void> _loadGroupAndSubjectIds() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    groupId = prefs.getString('currentGroupId') ?? '';
    subjectId = prefs.getString('currentSubjectId') ?? '';
    if (groupId.isEmpty || subjectId.isEmpty) {
      // Handle the case where groupId or subjectId is not set
      print('Error: groupId or subjectId not set');
    }
  }

  Future<void> _loadStudentsAndDates() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    students.clear();
    dates.clear();
    students.addAll(prefs.getStringList('students') ?? []);
    dates.addAll(prefs.getStringList('dates') ?? []);
  }

  Future<void> synchronize() async {
    await _syncFromSharedPreferences();
    await _syncFromFirebase();
  }

  Future<void> _syncFromSharedPreferences() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    for (String student in students) {
      scores[student] = {};
      for (String date in dates) {
        String key = '$student:$date';
        String? score = prefs.getString(key);
        if (score != null) {
          scores[student]![date] = {
            'score': score,
            'gradeId': prefs.getString('$key:gradeId') ?? '',
          };
        }
      }
    }
    setState(() {});
  }

  Future<void> _syncFromFirebase() async {
    if (groupId.isEmpty || subjectId.isEmpty) return;

    final db = FirebaseDatabase.instance.ref().child('college/groups/$groupId/subjects/$subjectId/students');
    
    try {
      DataSnapshot snapshot = await db.get();
      if (snapshot.value != null) {
        Map<dynamic, dynamic> data = snapshot.value as Map<dynamic, dynamic>;
        data.forEach((studentId, studentData) {
          if (studentData['grades'] != null) {
            Map<dynamic, dynamic> grades = studentData['grades'] as Map<dynamic, dynamic>;
            scores[studentId] = {};
            grades.forEach((gradeId, gradeData) {
              scores[studentId]![gradeData['date']] = {
                'gradeId': gradeId,
                'score': gradeData['score'],
              };
            });
          }
        });
        await _saveToSharedPreferences();
        setState(() {});
      }
    } catch (e) {
      print('Error syncing from Firebase: $e');
    }
  }

  Future<void> _saveToSharedPreferences() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    for (String student in scores.keys) {
      for (String date in scores[student]!.keys) {
        String key = '$student:$date';
        await prefs.setString(key, scores[student]![date]!['score']!);
        await prefs.setString('$key:gradeId', scores[student]![date]!['gradeId']!);
      }
    }
  }

  Future<void> updateGrades(String studentId, String date, String newScore, bool isAbsent) async {
    String score = isAbsent ? '–ù' : newScore;
    String gradeId = scores[studentId]?[date]?['gradeId'] ?? '';
    
    setState(() {
      scores[studentId] ??= {};
      scores[studentId]![date] = {
        'score': score,
        'gradeId': gradeId,
      };
    });

    // Update SharedPreferences
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String key = '$studentId:$date';
    await prefs.setString(key, score);
    await prefs.setString('$key:gradeId', gradeId);

    // Update Firebase if possible
    if (groupId.isNotEmpty && subjectId.isNotEmpty) {
      try {
        final db = FirebaseDatabase.instance.ref()
            .child('college/groups/$groupId/subjects/$subjectId/students/$studentId/grades/$gradeId');
        await db.set({
          'date': date,
          'score': score,
        });
      } catch (e) {
        print('Error updating Firebase: $e');
      }
    }
  }

  // ... (rest of the class remains the same)
}